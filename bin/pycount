#!/usr/bin/env python
#-*- coding: utf-8 -*-


"""
   bin/pycount
   ~~~~~~~~~~~~~~~

   Pycount script

   :copyright: (c) Tihomir Saulic
   :license: DO WHAT YOU WANT TO PUBLIC LICENSE, see LICENSE for more details
"""


from __future__ import print_function

import argparse
import pkg_resources

from pycount.core import Counter
from pycount.core import Timer


VERSION = pkg_resources.require('pycount')[0].version

def report():
    """Generates and prints a decent looking breakdown report for lines
       of code for all existent languages under our path
    """
    if COUNTER.results:
        counted = sum(COUNTER.file_types.values())
        print(str((COUNTER.total_uniques - counted)) + " ignored files")
        print("version " + VERSION)
        print("\nLanguage                       Files         LOC")
        print("-" * 48)
        for key, value in sorted(COUNTER.results.items(), key=lambda x: x[1],
                                 reverse=True):
            if value is not 0:
                print("{0:24}     {1:7d}     {2:7d}".format(key, COUNTER.file_types[key], value))
        print("-" * 48)
        print("{0:24}     {1:7d}   {2:9d}".format("SUM:", counted, sum(COUNTER.results.values())))
        print("-" * 48)
        print("{0:24} {1:23.2f}".format("RUNTIME (sec):", TIMED))
        print("-" * 48)
    else:
        print("No results.")

def chart_it():
    """Generates a chart with languages breakdown from results
    """
    if COUNTER.results:
        import operator
        import matplotlib.pyplot as plt
        sorted_results = dict(sorted(COUNTER.results.items(), key=operator.itemgetter(1), reverse=True)[:5])
        labels = [x for x in sorted_results.keys()]
        sizes = [COUNTER.results[x] for x in labels]
        colors = ['yellowgreen', 'gold', 'lightskyblue', 'lightcoral', 'red']
        plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%',
                shadow=True, startangle=90)
        plt.savefig('pycount_results.png', format='png')


if __name__ == "__main__":
    PARSER = argparse.ArgumentParser(description='Perform LOC counting.')
    PARSER.add_argument('-v', '--version', action='version',
                        version=VERSION)
    PARSER.add_argument('-c', '--chart', action='store_true',
                        help='store the chart for current result set')
    PARSER.add_argument('-e', '--exclude', nargs=1, type=str,
                        help='directories/files to be excluded from counting')
    PARSER.add_argument('files', nargs='*')
    ARGS = vars(PARSER.parse_args())
    try:
        EXCLUDED = ARGS['exclude'][0].split(',')
    except (KeyError, TypeError):
        EXCLUDED = None
    if ARGS['files']:
        COUNTER = Counter(ARGS['files'], ignore=EXCLUDED)
    else:
        COUNTER = Counter('.', ignore=EXCLUDED)
    try:
        with Timer() as timer:
            COUNTER.discover()
            COUNTER.count()
    finally:
        TIMED = timer.interval
    report()
    if ARGS['chart']:
         chart_it()


